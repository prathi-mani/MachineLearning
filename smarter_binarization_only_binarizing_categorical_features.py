# -*- coding: utf-8 -*-
"""Smarter_binarization_Only_binarizing_categorical_features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rdkd6NFeNbi46huglweDeZp7NTDuSoxR
"""

from sklearn.preprocessing import MinMaxScaler,OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline

dev_data = pd.read_csv('my_dev.csv')
train_data = pd.read_csv('my_train.csv')

Numerical_Headers =  [ 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']
Categorical_Headers = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition']
# Separating features and labels

train_data['SalePrice'] = np.log(train_data['SalePrice'])
dev_data['SalePrice'] = np.log(dev_data['SalePrice'])


dev_data_label = dev_data['SalePrice']
train_data_label = train_data['SalePrice']

dev_data_features = dev_data.drop(['Id', 'SalePrice'], axis=1)
train_data_features = train_data.drop(['Id', 'SalePrice'], axis=1)


for column in Categorical_Headers:
    train_data_features[column] = train_data_features[column].astype(str)
    dev_data_features[column] = dev_data_features[column].astype(str)


#binarizing



# Define preprocessing for numerical and categorical data
num_processor = Pipeline([
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', MinMaxScaler(feature_range=(0, 1)))
])

cat_processor = Pipeline([
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OneHotEncoder(sparse_output=True, handle_unknown='ignore'))
])

# Combine preprocessing
preprocessor = ColumnTransformer(
    transformers=[
        ('num', num_processor, Numerical_Headers),
        ('cat', cat_processor, Categorical_Headers)
    ]
)

preprocessor.fit(train_data_features)
binary_train_data_features=preprocessor.transform(train_data_features)
binary_dev_data_features= preprocessor.transform(dev_data_features)


# Fit the model with the binary (encoded) features
model = LinearRegression()

model.fit(binary_train_data_features, train_data_label)

dev_pred_log = model.predict(binary_dev_data_features)


# Calculate RMSLE
rmsle = np.sqrt(np.mean((dev_pred_log - dev_data_label) ** 2))
print("RMSLE on Dev Set: " + str(rmsle))

