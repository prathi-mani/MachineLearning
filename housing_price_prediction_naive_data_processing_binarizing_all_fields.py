# -*- coding: utf-8 -*-
"""housing_price_prediction_Naive_data_processing_binarizing_all_fields.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1waFo5Fn_HljksMbxfgkzhAdDFCXbXj62
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression

dev_data = pd.read_csv('my_dev.csv')
train_data = pd.read_csv('my_train.csv')

corrmat=train_data.corr()
corrmat['SalePrice'].sort_values(ascending=False).head(10)

train_data['SalePrice'] = np.log(train_data['SalePrice'])
dev_data['SalePrice'] = np.log(dev_data['SalePrice'])


dev_data_label = dev_data['SalePrice']
train_data_label = train_data['SalePrice']

dev_data_features = dev_data.drop(['Id', 'SalePrice'], axis=1)
train_data_features = train_data.drop(['Id', 'SalePrice'], axis=1)


encoder=OneHotEncoder(sparse_output=False,handle_unknown='ignore')

dev_data_features = dev_data_features.astype(str)
train_data_features = train_data_features.astype(str)

# Continue from your OneHotEncoding
binary_train_data_features = encoder.fit_transform(train_data_features)
binary_dev_data_features = encoder.transform(dev_data_features)

# Fit the model with the binary (encoded) features
model = LinearRegression()

model.fit(binary_train_data_features, train_data_label)


train_pred_log = model.predict(binary_train_data_features)
dev_pred_log = model.predict(binary_dev_data_features)

train_pred = np.exp(train_pred_log)
dev_pred = np.exp(dev_pred_log)

# Convert predictions and actual values to floats
dev_pred_float = np.array(dev_pred).astype(float)
dev_data_label_float = np.array(dev_data_label).astype(float)

# Calculate RMSLE
rmsle = np.sqrt(np.mean((dev_pred_log - dev_data_label) ** 2))
print("RMSLE on Dev Set: " + str(rmsle))


# Reading test data
test_data = pd.read_csv('test.csv')

# Preprocessing test data
test_data_features = test_data.drop(['Id'], axis=1)  # Assuming 'SalePrice' is not in test data
test_data_features = test_data_features.astype(str)

# Apply OneHotEncoding to test data
binary_test_data_features = encoder.transform(test_data_features)

# Predicting on test data
test_pred_log = model.predict(binary_test_data_features)

# Convert log predictions back to normal scale
test_pred = np.exp(test_pred_log)

# Creating submission DataFrame
submission = pd.DataFrame({
    'Id': test_data['Id'],  # Replace 'Id' with the actual ID column name in your test data if different
    'SalePrice': test_pred
})

# Exporting the submission file
submission.to_csv('submission.csv', index=False)

"""What are your top 10 most positive and top 10 most negative features? Do they make sense"""

Numerical_Headers =  [ 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']
Categorical_Headers = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition']
# Separating features and labels


train_data['SalePrice'] = np.log(train_data['SalePrice'])
dev_data['SalePrice'] = np.log(dev_data['SalePrice'])


dev_data_label = dev_data['SalePrice']
train_data_label = train_data['SalePrice']

dev_data_features = dev_data.drop(['Id', 'SalePrice'], axis=1)
train_data_features = train_data.drop(['Id', 'SalePrice'], axis=1)


for column in Categorical_Headers:
    train_data_features[column] = train_data_features[column].astype(str)
    dev_data_features[column] = dev_data_features[column].astype(str)


encoder=OneHotEncoder(sparse_output=False,handle_unknown='ignore')



# Continue from your OneHotEncoding
binary_train_data_features = encoder.fit_transform(train_data_features)
binary_dev_data_features = encoder.transform(dev_data_features)

# Fit the model with the binary (encoded) features
model = LinearRegression()

model.fit(binary_train_data_features, train_data_label)


train_pred_log = model.predict(binary_train_data_features)
dev_pred_log = model.predict(binary_dev_data_features)

train_pred = np.exp(train_pred_log)
dev_pred = np.exp(dev_pred_log)

# Convert predictions and actual values to floats
dev_pred_float = np.array(dev_pred).astype(float)
dev_data_label_float = np.array(dev_data_label).astype(float)

# Calculate RMSLE
rmsle = np.sqrt(np.mean((dev_pred_log - dev_data_label) ** 2))
print("RMSLE on Dev Set: " + str(rmsle))

bias_weight = model.intercept_
print(f"Feature weight for the bias dimension (intercept): {bias_weight}")

# @title Default title text
# Get the coefficients again
coefficients = model.coef_

# Assuming you are using a OneHotEncoder or similar
feature_names = encoder.get_feature_names_out()  # Directly access the feature names
feature_coefficients = dict(zip(feature_names, coefficients))

# Continue with sorting and extracting top features
sorted_features = sorted(feature_coefficients.items(), key=lambda x: x[1], reverse=True)
top_10_positive = sorted_features[:10]
top_10_negative = sorted_features[-10:]

top_10_positive, top_10_negative

"""Whatâ€™s your feature weight for the bias dimension? Does it make sense?

Test
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LinearRegression


train_data = pd.read_csv('train.csv')

# Log-transform the SalePrice in your development and training data
train_data['SalePrice'] = np.log(train_data['SalePrice'])


Numerical_Headers =  ['Id', 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']
Categorical_Headers = ['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition']
# Separating features and labels

train_data_label = train_data['SalePrice']

train_data_features = train_data.drop(['Id', 'SalePrice'], axis=1)

# Convert only categorical features to strings
for column in Categorical_Headers:
    train_data_features[column] = train_data_features[column].astype(str)


# Initialize OneHotEncoder
encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')



# OneHotEncoding
binary_train_data_features = encoder.fit_transform(train_data_features)


# Fit the Linear Regression model
model = LinearRegression()
model.fit(binary_train_data_features, train_data_label)



# Reading test data
test_data = pd.read_csv('test.csv')

# Preprocessing test data
test_data_features = test_data.drop(['Id'], axis=1)  # Assuming 'SalePrice' is not in test data


for column in Categorical_Headers:
    test_data_features[column] = test_data_features[column].astype(str)


# Apply OneHotEncoding to test data
binary_test_data_features = encoder.transform(test_data_features)

# Predicting on test data
test_pred_log = model.predict(binary_test_data_features)

# Convert log predictions back to normal scale
test_pred = np.exp(test_pred_log)

# Creating submission DataFrame
submission = pd.DataFrame({
    'Id': test_data['Id'],  # Replace 'Id' with the actual ID column name in your test data if different
    'SalePrice': test_pred
})

# Exporting the submission file
submission.to_csv('submission.csv', index=False)