# -*- coding: utf-8 -*-
"""Ridge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18O-KtKEOhRLrLDi-0Rk0nAjsgnooMABf
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, RobustScaler
from sklearn.linear_model import RidgeCV
from sklearn.pipeline import Pipeline

# Load data
dev_data = pd.read_csv('my_dev.csv')
train_data = pd.read_csv('my_train.csv')
Numerical_Headers =  [ 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces',  'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']
Categorical_Headers = ['MSZoning','Street', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive',  'SaleType', 'SaleCondition']
# Separating features and labels
# Log transform SalePrice
train_data['SalePrice'] = np.log(train_data['SalePrice'])
dev_data['SalePrice'] = np.log(dev_data['SalePrice'])

# Separate features and labels
dev_data_label = dev_data['SalePrice']
train_data_label = train_data['SalePrice']


dev_data_features = dev_data.drop(['Id', 'SalePrice','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'], axis=1)
train_data_features = train_data.drop(['Id', 'SalePrice','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'], axis=1)



for column in Categorical_Headers:
    train_data_features[column] = train_data_features[column].astype(str)
    dev_data_features[column] = dev_data_features[column].astype(str)



# Define the preprocessor as OneHotEncoder
preprocessor = OneHotEncoder(sparse_output=False, handle_unknown='ignore')

# Define the Ridge regression model
alphas = np.linspace(1, 50, 50)
ridge_model = RidgeCV(alphas=alphas, cv=None, store_cv_values=True)

# Create a pipeline
full_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('scaler', RobustScaler(with_centering=False)),
    ('ridge', ridge_model)
])

# Fit the full pipeline to your training data
model = full_pipeline.fit(train_data_features, train_data_label)

# Extract and print the optimal alpha and the score
optimal_alpha = model.named_steps['ridge'].alpha_
# Calculate RMSE from the stored cross-validation values
best_score = np.sqrt(np.min(model.named_steps['ridge'].cv_values_.mean(axis=0)))

print('Optimal Alpha:', optimal_alpha)
print('Best RMSE Score:', best_score)



import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, RobustScaler
from sklearn.linear_model import RidgeCV
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler,OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import Pipeline
from sklearn.linear_model import RidgeCV
from sklearn.preprocessing import RobustScaler
import numpy as np
from sklearn.impute import KNNImputer

# Load data
dev_data = pd.read_csv('my_dev.csv')
train_data = pd.read_csv('my_train.csv')
Numerical_Headers =  [ 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces',  'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']
Categorical_Headers = ['MSZoning','Street', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive',  'SaleType', 'SaleCondition']
# Separating features and labels
# Log transform SalePrice
train_data['SalePrice'] = np.log(train_data['SalePrice'])
dev_data['SalePrice'] = np.log(dev_data['SalePrice'])

# Separate features and labels
dev_data_label = dev_data['SalePrice']
train_data_label = train_data['SalePrice']


dev_data_features = dev_data.drop(['Id', 'SalePrice','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'], axis=1)
train_data_features = train_data.drop(['Id', 'SalePrice','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'], axis=1)



for column in Categorical_Headers:
    train_data_features[column] = train_data_features[column].astype(str)
    dev_data_features[column] = dev_data_features[column].astype(str)



# Define the preprocessor as OneHotEncoder
#preprocessor = OneHotEncoder(sparse_output=False, handle_unknown='ignore')


num_processor = Pipeline([
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', MinMaxScaler(feature_range=(0, 1)))
])
cat_processor = Pipeline([
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OneHotEncoder(sparse_output=True, handle_unknown='ignore'))
])
preprocessor = ColumnTransformer(
    transformers=[
        ('num', num_processor, Numerical_Headers),
        ('cat', cat_processor, Categorical_Headers)
    ]
)

preprocessor.fit(train_data_features)
binary_train_data_features = preprocessor.transform(train_data_features)
binary_dev_data_features = preprocessor.transform(dev_data_features)


# Define the Ridge regression model
alphas = np.linspace(1, 50, 50)
ridge_model = RidgeCV(alphas=alphas, cv=None, store_cv_values=True)

# Create a pipeline
full_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('scaler', RobustScaler(with_centering=False)),
    ('ridge', ridge_model)
])

# Fit the full pipeline to your training data
model = full_pipeline.fit(train_data_features, train_data_label)

# Extract and print the optimal alpha and the score
optimal_alpha = model.named_steps['ridge'].alpha_
# Calculate RMSE from the stored cross-validation values
best_score = np.sqrt(np.min(model.named_steps['ridge'].cv_values_.mean(axis=0)))

print('Optimal Alpha:', optimal_alpha)
print('Best RMSE Score:', best_score)



import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, RobustScaler, MinMaxScaler
from sklearn.linear_model import RidgeCV
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.metrics import mean_squared_error

# Load data
dev_data = pd.read_csv('my_dev.csv')
train_data = pd.read_csv('my_train.csv')

# Define headers
Numerical_Headers =  [ 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces',  'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']
Categorical_Headers = ['MSZoning','Street', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive',  'SaleType', 'SaleCondition']
# Separating features and labels

# Log transform SalePrice
train_data['SalePrice'] = np.log(train_data['SalePrice'])
dev_data['SalePrice'] = np.log(dev_data['SalePrice'])

# Separate features and labels
train_data_label = train_data['SalePrice']
dev_data_label = dev_data['SalePrice']
train_data_features = train_data.drop(['Id', 'SalePrice','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'], axis=1 )
dev_data_features = dev_data.drop(['Id', 'SalePrice','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature'], axis=1 )

# Convert categorical columns to string
for column in Categorical_Headers:
    train_data_features[column] = train_data_features[column].astype(str)
    dev_data_features[column] = dev_data_features[column].astype(str)

# Define preprocessors
num_processor = Pipeline([
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', MinMaxScaler())
])
cat_processor = Pipeline([
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OneHotEncoder(handle_unknown='ignore'))
])
preprocessor = ColumnTransformer(
    transformers=[
        ('num', num_processor, Numerical_Headers),
        ('cat', cat_processor, Categorical_Headers)
    ]
)

# Define the Ridge regression model
alphas = np.linspace(1, 50, 50)
ridge_model = RidgeCV(alphas=alphas, cv=10, store_cv_values=True)

# Create a pipeline
full_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('scaler', RobustScaler(with_centering=False)),  # Set with_centering to False
    ('ridge', ridge_model)
])

# Fit the full pipeline to your training data
model = full_pipeline.fit(train_data_features, train_data_label)

# Remaining part of your code...


# Extract and print the optimal alpha and the score
optimal_alpha = model.named_steps['ridge'].alpha_
best_rmse = np.sqrt(np.min(model.named_steps['ridge'].cv_values_.mean(axis=0)))

print('Optimal Alpha:', optimal_alpha)
print('Best RMSE:', best_rmse)

# Predict and evaluate on development set
dev_predictions = model.predict(dev_data_features)
dev_rmse = np.sqrt(mean_squared_error(dev_data_label, dev_predictions))
print('Development Set RMSE:', dev_rmse)



# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, RobustScaler  # Consider choosing either MinMaxScaler or RobustScaler
from sklearn.linear_model import RidgeCV
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.metrics import mean_squared_error

# Load data
dev_data = pd.read_csv('my_dev.csv')
train_data = pd.read_csv('my_train.csv')

# Define headers
Numerical_Headers =  [ 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces',  'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']
Categorical_Headers = ['MSZoning','Street', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive',  'SaleType', 'SaleCondition']
# Separating features and labels

# Log transform SalePrice
train_data['SalePrice'] = np.log(train_data['SalePrice'])
dev_data['SalePrice'] = np.log(dev_data['SalePrice'])

# Separate features and labels
train_data_label = train_data['SalePrice']
dev_data_label = dev_data['SalePrice']

train_data_features = train_data.drop( ['Id', 'SalePrice','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature' ], axis=1)
dev_data_features = dev_data.drop([  'Id', 'SalePrice','Alley','GarageYrBlt','PoolQC','Fence','MiscFeature' ], axis=1)

# Convert categorical columns to string
for column in Categorical_Headers:
    train_data_features[column] = train_data_features[column].astype(str)
    dev_data_features[column] = dev_data_features[column].astype(str)

# Define preprocessors
num_processor = Pipeline([
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', RobustScaler())  # Choose the appropriate scaler
])
cat_processor = Pipeline([
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('encoder', OneHotEncoder(handle_unknown='ignore'))
])
preprocessor = ColumnTransformer([
    ('num', num_processor, Numerical_Headers),
    ('cat', cat_processor, Categorical_Headers)
])

# Define the Ridge regression model
alphas = np.linspace(1, 50, 50)
ridge_model = RidgeCV(alphas=alphas, cv=None, store_cv_values=True)

# Create a pipeline
full_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('ridge', ridge_model)
])

# Fit the full pipeline to your training data
model = full_pipeline.fit(train_data_features, train_data_label)

# Extract and print the optimal alpha and the score
optimal_alpha = model.named_steps['ridge'].alpha_
best_rmse = np.sqrt(np.min(model.named_steps['ridge'].cv_values_.mean(axis=0)))

print('Optimal Alpha:', optimal_alpha)
print('Best RMSE:', best_rmse)

# Predict and evaluate on development set
dev_predictions = model.predict(dev_data_features)
dev_rmse = np.sqrt(mean_squared_error(dev_data_label, dev_predictions))
print('Development Set RMSE:', dev_rmse)